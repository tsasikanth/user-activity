{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Modal","setAppElement","App","state","open","ok","userActivity","userName","date","Date","members","id","real_name","tz","activity_periods","start_time","end_time","onOpenModal","userId","name","activityPeriods","filter","user","setState","usrId","onCloseModal","onChange","console","log","dateString","toString","userObj","activityObj","activeList","obj","slice","includes","usersList","this","map","className","key","onClick","activityList","length","index","style","margin","isOpen","onRequestClose","center","display","marginLeft","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e068b57.chunk.js","sourcesContent":["import React,{Component}from 'react';\nimport './App.css';\nimport Modal from 'react-modal';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n//import axios from 'axios';\nModal.setAppElement(\"#root\");\nclass App extends Component {\n  state={\n        open: false,\n        ok: true,\n        userActivity:[],\n        userName:null,\n        date: new Date(),\n        members: [\n                  {\n                  id: \"W012A3CDE\",\n                  real_name: \"Egon Spengler\",\n                  tz: \"America/Los_Angeles\",\n                  activity_periods: [\n                            {\n                            start_time: \"Feb 01 2020  1:33PM\",\n                            end_time: \"Feb 1 2020 1:54PM\"\n                            },\n                            {\n                            start_time: \"Mar 01 2020  11:11AM\",\n                            end_time: \"Mar 1 2020 2:00PM\"\n                            },\n                            {\n                            start_time: \"Mar 16 2020  5:33PM\",\n                            end_time: \"Mar 16 2020 8:02PM\"\n                            }\n                  ]\n                  },\n                  {\n                  id: \"W07QCRPA4\",\n                  real_name: \"Glinda Southgood\",\n                  tz: \"Asia/Kolkata\",\n                  activity_periods: [\n                                          {\n                                              start_time: \"Feb 01 2020  1:33PM\",\n                                              end_time: \"Feb 1 2020 1:54PM\"\n                                          },\n                                          {\n                                              start_time: \"Mar 01 2020  11:11AM\",\n                                              end_time: \"Mar 1 2020 2:00PM\"\n                                          },\n                                          {\n                                              start_time: \"Mar 16 2020  5:33PM\",\n                                              end_time: \"Mar 16 2020 8:02PM\"\n                                          }\n                                    ]\n                  }\n              ]\n     }\n  onOpenModal = (userId,name) => {\n        let userObj = this.state.members.filter(user=>{\n              return user.id===userId\n        })\n        //console.log(userObj)\n        let activityObj = userObj[0];\n        //console.log(activityObj)\n        //console.log(userObj)\n        let activityPeriods = activityObj.activity_periods\n        this.setState({ \n          open: true,\n          userActivity:activityPeriods,\n          userName:name,\n          usrId:userId\n        });\n  };\n \n  onCloseModal = () => {\n        this.setState({ \n              open: false,\n              userActivity:[],\n              userName:null\n        });\n  };\n  onChange = (date) => {\n        console.log(date);\n        let dateString = date.toString();\n        console.log(dateString);\n        let userObj = this.state.members.filter(user=>{\n              return user.id===this.state.usrId\n          })\n        console.log(userObj)\n        let activityObj = userObj[0];\n        console.log(activityObj)\n        console.log(userObj)\n        let activityPeriods = activityObj.activity_periods\n        let activeList = activityPeriods.filter((obj)=>{\n          console.log(obj.start_time.slice(0,11))\n          console.log(dateString.includes(obj.start_time.slice(0,11)))\n              return dateString.includes(obj.start_time.slice(0,11))\n        })\n        console.log(activeList)\n        this.setState({ \n          userActivity:activeList \n        })\n  }\n  render(){\n        let usersList = this.state.members.map((obj)=>{\n          return (\n              <div className = \"align-user\" key ={obj.id} onClick={()=>this.onOpenModal(obj.id,obj.real_name)}>\n                  <div className = \"align-name\">Name:{obj.real_name}</div>\n                  <div className=\"align-country\">country:{obj.tz}</div>         \n              </div>\n              \n          )\n        })\n        let activityList = <p>No Activity for this user on this day</p>; \n        if(this.state.userActivity.length>0){\n          activityList = this.state.userActivity.map((obj,index)=>{\n            return (\n              <div key = {index}>\n                  {/* <p>{obj.start_time}</p> */}\n                  <div style ={{margin:\"40px\"}}>\n                      <div>\n                            <div className = \"t1\">\n                                <div  className = \"t2\"></div>\n                                <div  className = \"t3\">{obj.start_time}</div>\n                            </div>\n                        </div>\n                        <div className = \"activityTime\">\n\n                        </div>\n                        <div>\n                            <div className = \"t4\">\n                                <div  className = \"t5\"></div>\n                                <div  className = \"t6\">{obj.end_time}</div>\n                            </div>\n                        </div>\n                        \n                  </div>\n                  {/* <p>{obj.end_time}</p> */}   \n              </div>\n            )\n          })\n        }\n        return (\n          <div className = \"App\">\n              {usersList}\n              <Modal isOpen={this.state.open} onRequestClose={this.onCloseModal} center>\n                <button onClick = {this.onCloseModal}>Close Modal</button>\n                <div style = {{display:\"flex\"}}>\n                    <div className = \"t9\">\n                          <h2>{this.state.userName} Activity Time</h2>\n                          {activityList}\n                    </div>\n                    <div style = {{marginLeft: \"10%\"}}>\n                        <Calendar onChange={this.onChange} value={this.state.date}/>\n                    </div> \n                </div>\n                    \n                      \n              </Modal>\n          </div>\n        )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}